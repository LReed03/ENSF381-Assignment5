{"ast":null,"code":"var _jsxFileName = \"E:\\\\School\\\\ENSF 381\\\\ENSF381-Assignment5\\\\my-lms-app\\\\src\\\\RegForm.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport './RegForm.css';\nimport SignupMessage from \"./SignupMessage\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction RegForm() {\n  _s();\n  const [username, setUsername] = useState('');\n  const [password, setPassword] = useState('');\n  const [confirmPassword, setConfirmPassword] = useState('');\n  const [email, setEmail] = useState('');\n  const [usernameErrors, setUsernameErrors] = useState([]);\n  const [passwordErrors, setPasswordErrors] = useState([]);\n  const [emailErrors, setEmailErrors] = useState([]);\n  const [message, setMessage] = useState('');\n  const [success, setSuccess] = useState(false);\n  const [formSubmitted, setFormSubmitted] = useState(false);\n  const [confirmPasswordValid, setConfirmPasswordValid] = useState();\n  async function studentReg() {\n    const backendEndpoint = 'http://127.0.0.1:5000/register';\n    try {\n      const response = await fetch(backendEndpoint, {\n        method: \"POST\",\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          username,\n          password,\n          email\n        })\n      });\n      const data = await response.json();\n      setMessage(data.message || \"Something went wrong\");\n      if (response.ok) {\n        setSuccess(true);\n        setTimeout(() => {\n          window.location.href = \"/Login\";\n        }, 2000);\n      } else {\n        setSuccess(false);\n      }\n    } catch (error) {\n      console.error(\"Error registering user:\", error);\n      setMessage(\"Failed to connect to the server.\");\n      setSuccess(false);\n    }\n    setFormSubmitted(true);\n  }\n  function validateUserName() {\n    let usernameRegex = /^[a-zA-Z][a-zA-Z0-9_-]{2,19}$/;\n    if (usernameRegex.test(username)) {\n      return true;\n    } else {\n      let usernameLengthRegex = /^.{3,20}$/;\n      let allowedCharRegex = /^[a-zA-Z0-9_-]+$/;\n      let letterStartRegex = /^[a-zA-Z]/;\n      let noSpaces = /^\\S+$/;\n      const errors = [];\n      if (!usernameLengthRegex.test(username)) {\n        errors.push(\"Username must be between 3 and 20 characters\");\n      }\n      if (!allowedCharRegex.test(username)) {\n        errors.push(\"Username can only contain letters, numbers, hyphens (-), and underscores (_)\");\n      }\n      if (!letterStartRegex.test(username)) {\n        errors.push(\"Username must start with a letter\");\n      }\n      if (!noSpaces.test(username)) {\n        errors.push(\"Username cannot contain spaces\");\n      }\n      setUsernameErrors(errors);\n      return false;\n    }\n  }\n  function validatePassword() {\n    let passwordRegex = /^(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])(?=.*[!@#$%^&*()\\-=+\\[\\]{};:'\",.<>?/~])(?!.* ).{8,}$/;\n    const errors = [];\n    if (passwordRegex.test(password)) {\n      setPasswordErrors(errors);\n      return true;\n    } else {\n      let passwordLengthRegex = /^.{8,}$/;\n      let specialCharRegex = /(?=.*[!@#$%^&*()\\-=+\\[\\]{};:'\",.<>?/~])/;\n      let numberRegex = /(?=.*[0-9])/;\n      let capitalRegex = /(?=.*[A-Z])/;\n      let lowercaseRegex = /(?=.*[a-z])/;\n      let noSpaces = /^\\S+$/;\n      if (!passwordLengthRegex.test(password)) {\n        errors.push(\"Password must be at least 8 characters long\");\n      }\n      if (!specialCharRegex.test(password)) {\n        errors.push(\"Password must contain at least 1 special character\");\n      }\n      if (!numberRegex.test(password)) {\n        errors.push(\"Password must contain at least 1 number\");\n      }\n      if (!capitalRegex.test(password)) {\n        errors.push(\"Password must contain at least 1 uppercase letter\");\n      }\n      if (!lowercaseRegex.test(password)) {\n        errors.push(\"Password must contain at least 1 lowercase letter\");\n      }\n      if (!noSpaces.test(password)) {\n        errors.push(\"Password cannot contain spaces\");\n      }\n      setPasswordErrors(errors);\n      return false;\n    }\n  }\n  function validateConfirmPassword() {\n    if (password == confirmPassword) {\n      setConfirmPasswordValid(true);\n      return true;\n    } else {\n      setConfirmPasswordValid(false);\n      return false;\n    }\n  }\n  function validateEmail() {\n    const errors = [];\n    let emailRegex = /^(?!.* )[a-zA-Z0-9]+@[a-zA-Z0-9]+\\.(com|net|ca|io)$/;\n    if (emailRegex.test(email)) {\n      setEmailErrors(errors);\n      return true;\n    } else {\n      errors.push(\"Must be a valid email format (e.g. username@example.com)\");\n      let noSpaces = /^\\S+$/;\n      let containsAt = /@/;\n      if (!noSpaces.test(email)) {\n        errors.push(\"Email cannot contain spaces\");\n      }\n      if (!containsAt.test(email)) {\n        errors.push(\"Email must contain the @ symbol\");\n      }\n      setEmailErrors(errors);\n      return false;\n    }\n  }\n  const handleSubmit = e => {\n    e.preventDefault();\n    setUsernameErrors([]);\n    setPasswordErrors([]);\n    setEmailErrors([]);\n    setMessage('');\n    setSuccess(false);\n    let usernameValid = validateUserName();\n    let passwordValid = validatePassword();\n    let confirmPasswordValid = validateConfirmPassword();\n    let emailValid = validateEmail();\n    if (usernameValid && passwordValid && confirmPasswordValid && emailValid) {\n      studentReg();\n    } else {\n      setMessage('Invalid username or password.');\n      setSuccess(false);\n      setFormSubmitted(true);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      class: \"page-title\",\n      children: \"Sign Up\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        class: \"signup\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          class: \"username-container\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            for: \"Username\",\n            children: \"Username:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 186,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            id: \"username\",\n            name: \"username\",\n            onChange: e => setUsername(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 187,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 185,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          class: \"password-container\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            for: \"password\",\n            children: \"Password:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 190,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"password\",\n            id: \"password\",\n            name: \"password\",\n            onChange: e => setPassword(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 191,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 189,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          class: \"password-container\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            for: \"confirm-password\",\n            children: \"Confirm Password:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 194,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"password\",\n            id: \"confirm-password\",\n            name: \"password\",\n            onChange: e => setConfirmPassword(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 195,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 193,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          class: \"email-container\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            for: \"email\",\n            children: \"Email:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 198,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            id: \"email\",\n            name: \"email\",\n            onChange: e => setEmail(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 199,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 197,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          class: \"signup-button\",\n          children: \"Sign Up\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 201,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 13\n    }, this), formSubmitted && /*#__PURE__*/_jsxDEV(SignupMessage, {\n      message: message,\n      usernameErrors: usernameErrors,\n      passwordErrors: passwordErrors,\n      emailErrors: emailErrors,\n      success: success,\n      confirmPasswordValid: confirmPasswordValid\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 181,\n    columnNumber: 9\n  }, this);\n}\n_s(RegForm, \"DEnpYvm/mVZIgbRi56C9Fei/BfA=\");\n_c = RegForm;\nexport default RegForm;\nvar _c;\n$RefreshReg$(_c, \"RegForm\");","map":{"version":3,"names":["React","useState","SignupMessage","jsxDEV","_jsxDEV","RegForm","_s","username","setUsername","password","setPassword","confirmPassword","setConfirmPassword","email","setEmail","usernameErrors","setUsernameErrors","passwordErrors","setPasswordErrors","emailErrors","setEmailErrors","message","setMessage","success","setSuccess","formSubmitted","setFormSubmitted","confirmPasswordValid","setConfirmPasswordValid","studentReg","backendEndpoint","response","fetch","method","headers","body","JSON","stringify","data","json","ok","setTimeout","window","location","href","error","console","validateUserName","usernameRegex","test","usernameLengthRegex","allowedCharRegex","letterStartRegex","noSpaces","errors","push","validatePassword","passwordRegex","passwordLengthRegex","specialCharRegex","numberRegex","capitalRegex","lowercaseRegex","validateConfirmPassword","validateEmail","emailRegex","containsAt","handleSubmit","e","preventDefault","usernameValid","passwordValid","emailValid","children","class","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","for","type","id","name","onChange","target","value","_c","$RefreshReg$"],"sources":["E:/School/ENSF 381/ENSF381-Assignment5/my-lms-app/src/RegForm.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport './RegForm.css';\r\nimport SignupMessage from \"./SignupMessage\";\r\n\r\nfunction RegForm(){\r\n    const [username, setUsername] = useState('');\r\n    const [password, setPassword] = useState('');\r\n    const [confirmPassword, setConfirmPassword] = useState('');\r\n    const [email, setEmail] = useState('');\r\n    const [usernameErrors, setUsernameErrors] = useState([]);\r\n    const [passwordErrors, setPasswordErrors] = useState([]);\r\n    const [emailErrors, setEmailErrors] = useState([]);\r\n    const [message, setMessage] = useState('');\r\n    const [success, setSuccess] = useState(false);\r\n    const [formSubmitted, setFormSubmitted] = useState(false);\r\n    const [confirmPasswordValid, setConfirmPasswordValid] = useState();\r\n\r\n    async function studentReg() {\r\n        const backendEndpoint = 'http://127.0.0.1:5000/register';\r\n        try {\r\n            const response = await fetch(backendEndpoint, {\r\n                method: \"POST\",\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify({\r\n                    username,\r\n                    password,\r\n                    email,\r\n                }),\r\n            });\r\n    \r\n            const data = await response.json();\r\n            setMessage(data.message || \"Something went wrong\");\r\n    \r\n            if (response.ok) {\r\n                setSuccess(true);\r\n                setTimeout(() => {\r\n                    window.location.href = \"/Login\";\r\n                }, 2000);\r\n            } else {\r\n                setSuccess(false);\r\n            }\r\n    \r\n        } catch (error) {\r\n            console.error(\"Error registering user:\", error);\r\n            setMessage(\"Failed to connect to the server.\");\r\n            setSuccess(false);\r\n        }\r\n    \r\n        setFormSubmitted(true);\r\n    }\r\n    \r\n\r\n    function validateUserName(){\r\n        let usernameRegex = /^[a-zA-Z][a-zA-Z0-9_-]{2,19}$/;\r\n        if(usernameRegex.test(username)){\r\n            return true;\r\n        }\r\n        else{\r\n            let usernameLengthRegex = /^.{3,20}$/;\r\n            let allowedCharRegex = /^[a-zA-Z0-9_-]+$/;\r\n            let letterStartRegex = /^[a-zA-Z]/;\r\n            let noSpaces = /^\\S+$/;\r\n            const errors = [];\r\n            if(!usernameLengthRegex.test(username)){\r\n                errors.push(\"Username must be between 3 and 20 characters\");\r\n            }\r\n\r\n            if(!allowedCharRegex.test(username)) {\r\n                errors.push(\"Username can only contain letters, numbers, hyphens (-), and underscores (_)\");\r\n            }\r\n            if(!letterStartRegex.test(username)){\r\n                errors.push(\"Username must start with a letter\");\r\n            }\r\n            if(!noSpaces.test(username)){\r\n                errors.push(\"Username cannot contain spaces\");\r\n            }\r\n            setUsernameErrors(errors);\r\n            return false;\r\n        }\r\n    }\r\n\r\n\r\n    function validatePassword(){\r\n        let passwordRegex = /^(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])(?=.*[!@#$%^&*()\\-=+\\[\\]{};:'\",.<>?/~])(?!.* ).{8,}$/;\r\n        const errors = [];\r\n        if(passwordRegex.test(password)){\r\n            setPasswordErrors(errors);\r\n            return true;\r\n        }\r\n        else{\r\n            let passwordLengthRegex = /^.{8,}$/;\r\n            let specialCharRegex =/(?=.*[!@#$%^&*()\\-=+\\[\\]{};:'\",.<>?/~])/;\r\n            let numberRegex = /(?=.*[0-9])/;\r\n            let capitalRegex = /(?=.*[A-Z])/;\r\n            let lowercaseRegex = /(?=.*[a-z])/;\r\n            let noSpaces = /^\\S+$/;\r\n            if(!passwordLengthRegex.test(password)){\r\n                errors.push(\"Password must be at least 8 characters long\");\r\n            }\r\n            if(!specialCharRegex.test(password)){\r\n                errors.push(\"Password must contain at least 1 special character\");\r\n            }\r\n            if(!numberRegex.test(password)){\r\n                errors.push(\"Password must contain at least 1 number\");\r\n            }\r\n            if(!capitalRegex.test(password)){\r\n                errors.push(\"Password must contain at least 1 uppercase letter\");\r\n            }\r\n            if(!lowercaseRegex.test(password)){\r\n                errors.push(\"Password must contain at least 1 lowercase letter\");\r\n            }\r\n            if(!noSpaces.test(password)){\r\n                errors.push(\"Password cannot contain spaces\");\r\n            }\r\n            setPasswordErrors(errors);\r\n            return false;\r\n        }\r\n\r\n    }\r\n\r\n\r\n    function validateConfirmPassword(){\r\n        if(password == confirmPassword){\r\n            setConfirmPasswordValid(true);\r\n            return true;\r\n        }\r\n        else{\r\n            setConfirmPasswordValid(false);\r\n            return false;\r\n        }\r\n    }\r\n\r\n    function validateEmail(){\r\n        const errors = [];\r\n        let emailRegex = /^(?!.* )[a-zA-Z0-9]+@[a-zA-Z0-9]+\\.(com|net|ca|io)$/;\r\n        if(emailRegex.test(email)){\r\n            setEmailErrors(errors);\r\n            return true;\r\n        }\r\n        else{\r\n            errors.push(\"Must be a valid email format (e.g. username@example.com)\");\r\n            let noSpaces = /^\\S+$/;\r\n            let containsAt = /@/\r\n            if(!noSpaces.test(email)){\r\n                errors.push(\"Email cannot contain spaces\");\r\n            }\r\n            if(!containsAt.test(email)){\r\n                errors.push(\"Email must contain the @ symbol\");\r\n            }\r\n            setEmailErrors(errors)\r\n            return false;\r\n        }\r\n    }\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault(); \r\n        setUsernameErrors([]);\r\n        setPasswordErrors([]);\r\n        setEmailErrors([]);\r\n        setMessage('');\r\n        setSuccess(false);\r\n        let usernameValid = validateUserName();\r\n        let passwordValid = validatePassword();\r\n        let confirmPasswordValid = validateConfirmPassword();\r\n        let emailValid = validateEmail();\r\n\r\n        if(usernameValid && passwordValid && confirmPasswordValid && emailValid){\r\n            studentReg();\r\n\r\n        }\r\n        else{\r\n            setMessage('Invalid username or password.');\r\n            setSuccess(false);\r\n            setFormSubmitted(true);\r\n        }\r\n    }\r\n\r\n    return(\r\n        <div>\r\n            <h2 class=\"page-title\">Sign Up</h2>\r\n            <form onSubmit={handleSubmit}>\r\n                <div class=\"signup\">\r\n                    <div class=\"username-container\">\r\n                        <label for=\"Username\">Username:</label>\r\n                        <input type=\"text\" id=\"username\" name=\"username\" onChange={(e) => setUsername(e.target.value)}></input>\r\n                    </div>\r\n                    <div class=\"password-container\">\r\n                        <label for=\"password\">Password:</label>\r\n                        <input type=\"password\" id=\"password\" name=\"password\"onChange={(e) => setPassword(e.target.value)}></input>\r\n                    </div>\r\n                    <div class=\"password-container\">\r\n                        <label for=\"confirm-password\">Confirm Password:</label>\r\n                        <input type=\"password\" id=\"confirm-password\" name=\"password\" onChange={(e) => setConfirmPassword(e.target.value)}></input>\r\n                    </div>\r\n                    <div class=\"email-container\">\r\n                        <label for=\"email\">Email:</label>\r\n                        <input type=\"text\" id=\"email\" name=\"email\" onChange={(e) => setEmail(e.target.value)}></input>\r\n                    </div>\r\n                    <button class=\"signup-button\">Sign Up</button>\r\n                </div>\r\n            </form>\r\n            {formSubmitted && (\r\n            <SignupMessage message={message} usernameErrors={usernameErrors} passwordErrors={passwordErrors} emailErrors={emailErrors} success={success} confirmPasswordValid={confirmPasswordValid}/>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default RegForm;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}